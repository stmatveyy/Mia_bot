import asyncio
from aiogram import Router, types
from aiogram.filters import StateFilter
from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import InlineKeyboardMarkup, CallbackQuery
import FSM.classes
import keyboards
from database import db_entityFunc
from database.database_func import Database
import keyboards.builder
import keyboards.inline
from misc import times as t

notes_router = Router(name='notes_router')


@notes_router.message(F.text == "–ó–∞–º–µ—Ç–∫–∏ üìí")
async def open_notes(message: types.Message, database: Database) -> None:

    '''–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫. –ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é.'''
    no_notes_text = "<b>–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.</b>\n –ù–∞–∂–º–∏ <b>¬´–î–æ–±–∞–≤–∏—Ç—å¬ª</b> –¥–ª—è –Ω–æ–≤–æ–π"
    notes_list = await db_entityFunc.view_all_entities(telegram_id=message.from_user.id,
                                                       database=database,
                                                       type_='notes')
    if notes_list == 0:
        await message.answer(text=no_notes_text, reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[keyboards.inline.notes_add_button], [keyboards.inline.notes_exit_button]]
        ))
    else:
        await message.answer(text="<b>–¢–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏:</b>\n" + notes_list[0],
                             reply_markup=InlineKeyboardMarkup(inline_keyboard=[[keyboards.inline.notes_add_button],
                                                                                [keyboards.inline.notes_delete_one_button],
                                                                                [keyboards.inline.notes_exit_button]]))

# –ü–æ–≤—Ç–æ—Ä –ø—Ä–µ–¥.–±–ª–æ–∫–∞ (–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥")
@notes_router.callback_query(F.data == 'go_back_notes')
async def open_notes_callback(callback: CallbackQuery,
                              database: Database) -> None:
    '''–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫. –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ callback'''
    await callback.answer()
    no_notes_text = "<b>–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.</b>\n–ù–∞–∂–º–∏ ¬´–î–æ–±–∞–≤–∏—Ç—å¬ª –¥–ª—è –Ω–æ–≤–æ–π"
    notes_list = await db_entityFunc.view_all_entities(telegram_id=callback.from_user.id,
                                                       database=database,
                                                       type_='notes')

    if notes_list == 0:

        await asyncio.sleep(0.3)
        await callback.message.edit_text(text=no_notes_text,
                                         reply_markup=InlineKeyboardMarkup(inline_keyboard=[[keyboards.inline.notes_add_button],
                                                                                            [keyboards.inline.notes_exit_button]]))
    else:

        await asyncio.sleep(0.3)
        await callback.message.edit_text(text="<b>–¢–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏:</b>\n" + notes_list[0],
                             reply_markup=InlineKeyboardMarkup(
                             inline_keyboard=[[keyboards.inline.notes_add_button],
                                              [keyboards.inline.notes_delete_one_button],
                                              [keyboards.inline.notes_exit_button]]))


@notes_router.callback_query(F.data == 'add_note')
async def add_note(callback: CallbackQuery, state: FSMContext) -> None:
    '''–ü—Ä–∏–≥–ª–∞—à–∞–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏.'''
    await asyncio.sleep(0.3)
    await callback.answer()
    await callback.message.edit_text(text="–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ.",
                                     reply_markup=InlineKeyboardMarkup(inline_keyboard=[[keyboards.inline.notes_back_button]]))
    await state.set_state(FSM.classes.FSMnotes.adding_note)


@notes_router.message(F.text, StateFilter(FSM.classes.FSMnotes.adding_note))
async def ask_for_time(message: types.Message,
                       state: FSMContext, 
                       database: Database):
    '''–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ / –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è'''

    await message.answer(text='–î–æ–±–∞–≤—å –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –∑–∞–º–µ—Ç–∫–∞ —Å—Ç–∞–ª–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º',
                         reply_markup=InlineKeyboardMarkup(
                             inline_keyboard=[[keyboards.inline.yes_remind_button],
                                              [keyboards.inline.no_remind_button]]))
    await state.update_data(msg_text=message.text)


@notes_router.callback_query(F.data == 'add_time')
async def add_time(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    keys = await keyboards.builder.time_keyboard()
    await callback.message.edit_text('–ö–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å? ', reply_markup=
                                     InlineKeyboardMarkup(inline_keyboard=keys))
    await state.set_state(FSM.classes.FSMnotes.adding_time)


@notes_router.callback_query(F.data.in_({'today_evn', 'tomorrow_mor', 'days_3', 'weekend'}))
async def time_chosen(callback: CallbackQuery, state: FSMContext, database:Database):
    await callback.answer()

    all_data = await state.get_data()
    reminder_text = all_data['msg_text']

    match callback.data:
        case 'today_evn':
            timestamp = t.TODAY_EVN
        case 'tomorrow_mor':
            timestamp = t.TOMORROW_MOR
        case 'days_3':
            timestamp = t.DAYS_3
        case 'weekend':
            timestamp = t.WEEKENDS

    await db_entityFunc.write_entity(
                                    text="'" + reminder_text + "'",
                                    telegram_id=callback.from_user.id,
                                    database=database,
                                    type_='reminders',         
                                    timestamp=timestamp)

    await callback.message.edit_text(text='Placeholder. Working!')


@notes_router.callback_query(F.data == 'no_time')
async def add_time(callback: CallbackQuery, state: FSMContext, database: Database):
    await callback.answer()
    note_text = await state.get_data('msg_text')

    await db_entityFunc.write_entity(text="'" + note_text + "'",
                                     telegram_id=callback.from_user.id,
                                     database=database,
                                     type_='notes')

    all_notes = await db_entityFunc.view_all_entities(telegram_id=callback.from_user.id,
                                                       database=database,
                                                       type_='notes')
    
    await callback.message.edit_text(text="<b>–ó–∞–º–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n–í—Å–µ –∑–∞–º–µ—Ç–∫–∏:\n\n" +
                          all_notes[0], reply_markup=InlineKeyboardMarkup(
         inline_keyboard=[[keyboards.inline.notes_add_button],
                          [keyboards.inline.notes_delete_one_button],
                          [keyboards.inline.notes_exit_button]]))

@notes_router.message(StateFilter(FSM.classes.FSMnotes.adding_note))
async def wrong_input(message: types.Message) -> None:
    '''–ù–µ–≤–µ—Ä–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞.'''
    await message.answer(text="<b>–≠—Ç–æ –Ω–µ –∑–∞–º–µ—Ç–∫–∞.</b>\n–ù–∞–ø–∏—à–∏ –µ–µ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–ù–∞–∑–∞–¥¬ª",
                         reply_markup=InlineKeyboardMarkup(inline_keyboard=[[keyboards.inline.notes_back_button]]))


@notes_router.callback_query(F.data == 'delete_note')
async def delete_note(callback: CallbackQuery,
                      state: FSMContext,
                      database: Database) -> None:
    all_notes = await db_entityFunc.view_all_notes(callback.from_user.id, database)
    await callback.answer()
    await asyncio.sleep(0.3)
    await callback.message.edit_text(text="–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è\n" + all_notes[0],
                                     reply_markup=InlineKeyboardMarkup(inline_keyboard=[[keyboards.inline.notes_back_button]]))
    await state.set_state(FSM.classes.FSMnotes.deleting_note)


@notes_router.message(StateFilter(FSM.classes.FSMnotes.deleting_note))
async def note_delete(message: types.Message,
                      state: FSMContext,
                      database: Database) -> None:
    
    message_is_valid: bool = message.text and message.text.isnumeric()

    if message_is_valid:

        all_notes = await db_entityFunc.view_all_notes(message.from_user.id, database)

        if int(message.text) >= all_notes[1] or int(message.text) == 0:
            await message.answer(text="<b>–¢–∞–∫–æ–π –∑–∞–º–µ—Ç–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</b>\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–ù–∞–∑–∞–¥¬ª",
                                 reply_markup=InlineKeyboardMarkup(inline_keyboard=[[keyboards.inline.notes_back_button]]))

        else:
            user_choice = int(message.text)
            await db_entityFunc.delete_note(message.from_user.id, user_choice, database=database)
            all_notes_after_delete = await db_entityFunc.view_all_notes(message.from_user.id, database=database)

            if all_notes_after_delete == 0:
                await asyncio.sleep(0.3)
                await message.answer(text="<b>–ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞, –∞ –¥—Ä—É–≥–∏—Ö –Ω–µ—Ç.</b>\n–ù–∞–∂–º–∏ ¬´–î–æ–±–∞–≤–∏—Ç—å¬ª –¥–ª—è –Ω–æ–≤–æ–π",
                                        reply_markup=InlineKeyboardMarkup(inline_keyboard=
                                                                          [[keyboards.inline.notes_add_button],
                                                                           [keyboards.inline.notes_exit_button]]))
            else:
                await asyncio.sleep(0.3)
                await message.answer(text="<b>–ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞!</b>\n–í—Å–µ –∑–∞–º–µ—Ç–∫–∏:\n\n" + all_notes_after_delete[0],
                                     reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                            [keyboards.inline.notes_add_button],
                                            [keyboards.inline.notes_delete_one_button],
                                            [keyboards.inline.notes_exit_button]]))
            await state.set_state(None)
    else:
        await message.answer(text="<b>–≠—Ç–æ –Ω–µ –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏.</b>\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–ù–∞–∑–∞–¥¬ª",
                             reply_markup=InlineKeyboardMarkup(inline_keyboard=[[keyboards.inline.notes_back_button]]))


@notes_router.callback_query(F.data == 'notes_exit')
async def exit_notes(callback: CallbackQuery) -> None:
    try:
        await callback.answer()
        await callback.message.delete()
    except TelegramBadRequest:
        await callback.answer(text="–°—Ç–∞—Ä—ã–µ –¥–∏–∞–ª–æ–≥–æ–≤—ã–µ –æ–∫–Ω–∞ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è –∑–∞–∫—Ä—ã—Ç—å...")