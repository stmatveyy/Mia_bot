import os
from dotenv import load_dotenv
import asyncio
import logging
import sys

from aiogram import Bot as bt
from aiogram import Dispatcher, Router, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.types import Message
from aiogram.utils.markdown import hbold
from aiogram.types.bot_command import BotCommand
from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardButton
from aiogram.types import InlineKeyboardMarkup, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state, State, StatesGroup
from aiogram import F
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
from aiogram.enums.chat_action import ChatAction
from aiogram.exceptions import TelegramBadRequest
from handlers.apshced import send_message_cron, send_message_interval
from handlers.apshced import send_message_time, apsched_router

from filters.admin_filter import adm_list
from config_data.config import config
import keyboards.inline
import keyboards.reply
from gpt.answer_gen import ask_gpt
from database import user_register, db_notes

dp = Dispatcher()
bot = bt(config.tg_bot.token, parse_mode=ParseMode.HTML)
dp.include_router(apsched_router)
scheduler = AsyncIOScheduler()

main_r = Router()  # –•–£–ô–ù–Ø –∫–∞–∫–∞—è-—Ç–æ
dp.include_router(main_r)


class FSMnotifications(StatesGroup):
    turned_on = State()
    turned_off = State()

class FSMcustom_notifications(StatesGroup):
    fill_notification = State()
    fill_exec_time = State()

class FSMgpt_states(StatesGroup):
    gpt_mode_on = State()

class FSMuser_state(StatesGroup):
    not_registered = State()

class FSMnotes(StatesGroup):
    adding_note = State()
    deleting_note = State()

print('[INFO] Bot is working now...')


@dp.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    if not await user_register.check_if_registered(id_=message.from_user.id):
        await message.answer("–î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
                             reply_markup=keyboards.reply.num_keyboard)
    else:
        await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!', reply_markup=keyboards.reply.home_keyboard)

@dp.message(F.content_type == types.ContentType.CONTACT)
async def num_sent(message: types.Message):
    contact = message.contact
    if not await user_register.check_user_data(num=contact.phone_number,message=message):
        await message.answer(text="–¢—ã –Ω–µ —Å—Ç—É–¥–µ–Ω—Ç —É—á–µ–±–Ω–æ–π –≥—Ä—É–ø–ø—ã. –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞, –∏–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Å–≤–æ—é –≥—Ä—É–ø–ø—É, –ø–∏—à–∏ –µ–º—É: ")
        await bot.send_contact(chat_id=message.chat.id, phone_number= '+79057984548', first_name='–ú–∞—Ç–≤–µ–π', last_name='–°—Ç–æ–ª—è—Ä–æ–≤')
    else:
        await message.answer(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!', reply_markup=keyboards.reply.home_keyboard)

@dp.message(F.text == '–ù–µ —Ö–æ—á—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å')
async def number_refuse(message: types.Message,state: FSMContext):
    await message.answer(text="<b>–ë–µ–∑ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º :(</b>",reply_markup=keyboards.reply.num_keyboard2)
    await state.set_state(FSMuser_state.not_registered)

@dp.message(Command(commands='settings'), ~StateFilter(FSMuser_state.not_registered))
async def open_settings(message: types.Message, state: FSMContext):
    curr_state = await state.get_state()
    if curr_state == FSMnotifications.turned_on:
        await message.answer(text="<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>",
                             reply_markup=InlineKeyboardMarkup(
                                    inline_keyboard=[[keyboards.inline.noti_off_button],
                                                     [keyboards.inline.settings_exit_button]]))
    else:
        await message.answer(text="<i>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</i>", reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[keyboards.inline.noti_on_button], [keyboards.inline.settings_exit_button]]))


@dp.message(lambda message: message.from_user.id in adm_list and message.text == 'adm')
async def admin_check(message: types.Message):
    await message.reply("–¢—ã –∞–¥–º–∏–Ω!")


@dp.message(F.text == "GPT üì°", ~StateFilter(FSMuser_state.not_registered))
async def gpt_turn_on(message: types.Message, state: FSMContext):
    await message.answer(text="–Ø GPT. –°–ø—Ä–æ—Å–∏ –º–µ–Ω—è –æ —á–µ–º-—É–≥–æ–¥–Ω–æ!",
                         reply_markup=keyboards.reply.gpt_keyboard)
    await state.set_state(FSMgpt_states.gpt_mode_on)


@dp.message(F.text == "–í—ã–∫–ª—é—á–∏—Ç—å GPT", ~StateFilter(FSMuser_state.not_registered))
async def gpt_turn_off(message: types.Message, state: FSMContext):
    await message.answer(text="–ë—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è!",
                        reply_markup=keyboards.reply.home_keyboard)
    await state.set_state(default_state)

@dp.message(F.text == "–ó–∞–º–µ—Ç–∫–∏ üìí", ~StateFilter(FSMuser_state.not_registered))
async def open_notes(message: types.Message):
    no_notes_text = "<b>–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.</b>\n –ù–∞–∂–º–∏ <b>¬´–î–æ–±–∞–≤–∏—Ç—å¬ª</b> –¥–ª—è –Ω–æ–≤–æ–π"
    notes_list = await db_notes.view_all_notes(message.from_user.id)
    if notes_list == 0:
        await message.answer(text=no_notes_text,reply_markup= InlineKeyboardMarkup(
            inline_keyboard=[[keyboards.inline.notes_add_button],[keyboards.inline.notes_exit_button]]
        ))
    else:
        await message.answer(text="<b>–¢–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏:</b>\n" + notes_list[0],
                         reply_markup=InlineKeyboardMarkup(
                             inline_keyboard=[[keyboards.inline.notes_add_button],
                                              [keyboards.inline.notes_delete_one_button],
                                              [keyboards.inline.notes_exit_button]]))
    
@dp.callback_query(F.data == 'go_back_notes',~StateFilter(FSMuser_state.not_registered)) # –ü–æ–≤—Ç–æ—Ä –ø—Ä–µ–¥.–±–ª–æ–∫–∞ (–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥")
async def open_notes2(callback:CallbackQuery):
    await callback.answer()
    no_notes_text = "<b>–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.</b>\n–ù–∞–∂–º–∏ ¬´–î–æ–±–∞–≤–∏—Ç—å¬ª –¥–ª—è –Ω–æ–≤–æ–π"
    notes_list = await db_notes.view_all_notes(callback.from_user.id)
    if notes_list == 0:
        await asyncio.sleep(0.3)
        await callback.message.edit_text(text=no_notes_text,reply_markup= InlineKeyboardMarkup(
            inline_keyboard=[[keyboards.inline.notes_add_button],[keyboards.inline.notes_exit_button]]
        ))
    else:
        await asyncio.sleep(0.3)
        await callback.message.edit_text(text="<b>–¢–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏:</b>\n" + notes_list[0],
                         reply_markup=InlineKeyboardMarkup(
                             inline_keyboard=[[keyboards.inline.notes_add_button],
                                              [keyboards.inline.notes_delete_one_button],
                                              [keyboards.inline.notes_exit_button]]))
    
@dp.callback_query(F.data == 'add_note')
async def add_note(callback: CallbackQuery,state: FSMContext):
    await asyncio.sleep(0.3)
    await callback.answer()
    await callback.message.edit_text(text="–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ.",reply_markup=InlineKeyboardMarkup(inline_keyboard=
        [[keyboards.inline.notes_back_button]]
    ))
    await state.set_state(FSMnotes.adding_note)

@dp.message(F.text, StateFilter(FSMnotes.adding_note))
async def write_new_note(message:types.Message,state: FSMContext):
    await db_notes.write_note("'" + message.text + "'", message.from_user.id)
    all_notes = await db_notes.view_all_notes(message.from_user.id)
    await message.answer(text="<b>–ó–∞–º–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n–í—Å–µ –∑–∞–º–µ—Ç–∫–∏:\n\n" + 
                        all_notes[0],reply_markup=InlineKeyboardMarkup(
        inline_keyboard=[[keyboards.inline.notes_add_button],
                         [keyboards.inline.notes_delete_one_button],
                         [keyboards.inline.notes_exit_button]]
    ))
    await state.set_state(default_state)

@dp.message(StateFilter(FSMnotes.adding_note))
async def wrong_input(message:types.Message):
    await message.answer(text="<b>–≠—Ç–æ –Ω–µ –∑–∞–º–µ—Ç–∫–∞.</b>\n–ù–∞–ø–∏—à–∏ –µ–µ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–ù–∞–∑–∞–¥¬ª",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[keyboards.inline.notes_back_button]]))

@dp.callback_query(F.data == 'delete_note')
async def delete_note(callback:CallbackQuery,state:FSMContext):
    all_notes = await db_notes.view_all_notes(callback.from_user.id)
    await callback.answer()
    await asyncio.sleep(0.3)
    await callback.message.edit_text(text="–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è\n" + all_notes[0],
                                     reply_markup=InlineKeyboardMarkup(inline_keyboard=[[keyboards.inline.notes_back_button]]))
    await state.set_state(FSMnotes.deleting_note)

@dp.message(StateFilter(FSMnotes.deleting_note))
async def note_delete(message: types.Message,state: FSMContext):
    if message.text and message.text.isnumeric():
        all_notes = await db_notes.view_all_notes(message.from_user.id)
        if int(message.text) > all_notes[1]:
            await message.answer(text="<b>–¢–∞–∫–æ–π –∑–∞–º–µ—Ç–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</b>\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–ù–∞–∑–∞–¥¬ª",
                                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[keyboards.inline.notes_back_button]]))
        else:
            user_choice = int(message.text)
            await db_notes.delete_note(message.from_user.id,user_choice)
            all_notes_after_delete = await db_notes.view_all_notes(message.from_user.id)
            if all_notes_after_delete == 0:
                await asyncio.sleep(0.3)
                await message.answer(text="<b>–ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞, –∞ –¥—Ä—É–≥–∏—Ö –Ω–µ—Ç.</b>\n–ù–∞–∂–º–∏ ¬´–î–æ–±–∞–≤–∏—Ç—å¬ª –¥–ª—è –Ω–æ–≤–æ–π",
                                        reply_markup=InlineKeyboardMarkup(inline_keyboard=
                                                                          [[keyboards.inline.notes_add_button],
                                                                           [keyboards.inline.notes_exit_button]]))
            else:
                await asyncio.sleep(0.3)
                await message.answer(text="<b>–ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞!</b>\n–í—Å–µ –∑–∞–º–µ—Ç–∫–∏:\n\n" + all_notes_after_delete[0],
                                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                            [keyboards.inline.notes_add_button],
                                            [keyboards.inline.notes_delete_one_button],
                                            [keyboards.inline.notes_exit_button]]))
            await state.set_state(default_state)
    else:
        await message.answer(text="<b>–≠—Ç–æ –Ω–µ –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏.</b>\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–ù–∞–∑–∞–¥¬ª",
                            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[keyboards.inline.notes_back_button]]))
        
@dp.callback_query(F.data == 'notes_exit')
async def exit_notes(callback: CallbackQuery):
    try:
        await callback.answer()
        await callback.message.delete()
    except TelegramBadRequest:
        await callback.answer(text="–°—Ç–∞—Ä—ã–µ –¥–∏–∞–ª–æ–≥–æ–≤—ã–µ –æ–∫–Ω–∞ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è –∑–∞–∫—Ä—ã—Ç—å...")

@dp.message(StateFilter(FSMgpt_states.gpt_mode_on), ~StateFilter(FSMuser_state.not_registered))
async def gpt_talk(message: types.Message):
    await bot.send_chat_action(chat_id=message.chat.id,
                               action=ChatAction.TYPING)
    gpt_answer = await ask_gpt(message.text)
    await message.answer(text=gpt_answer)

@dp.callback_query(StateFilter(default_state), F.data == 'noti_button_is_on', ~StateFilter(FSMuser_state.not_registered))
async def start_notifications(callback: CallbackQuery, state: FSMContext):
    await callback.answer(text='–ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∏ —â–∞ –±—É–¥—É—Ç')

    chat_id = callback.from_user.id
    scheduler.add_job(send_message_time,
                      trigger='date',
                      run_date=datetime.now() + timedelta(seconds=10),
                      kwargs={'bot': bot, 'msg_id': chat_id})

    scheduler.add_job(send_message_cron,
                      trigger='cron',
                      hour=datetime.now().hour,
                      minute=datetime.now().minute + 1,
                      start_date=datetime.now(),
                      kwargs={'bot': bot, 'msg_id': chat_id})

    scheduler.add_job(send_message_interval,
                      trigger='interval',
                      seconds=5,
                      kwargs={'bot': bot, 'msg_id': chat_id})

    scheduler.start()
    await asyncio.sleep(0.3)
    await callback.message.edit_text(text="‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è",
                                     reply_markup=InlineKeyboardMarkup(
                                                        inline_keyboard=[
                                                            [keyboards.inline.noti_off_button],
                                                            [keyboards.inline.settings_exit_button]]
                                                            ))

    await state.set_state(FSMnotifications.turned_on)


@dp.callback_query(StateFilter(FSMnotifications.turned_on), F.data == 'noti_button_is_off', ~StateFilter(FSMuser_state.not_registered))
async def pause_notifications(callback: CallbackQuery, state: FSMContext):
    scheduler.pause()
    await callback.answer(text='–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã... ')
    await state.set_state(FSMnotifications.turned_off)
    await asyncio.sleep(0.3)
    await callback.message.edit_text(text="‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è",
                                     reply_markup=InlineKeyboardMarkup(
                                         inline_keyboard=[[keyboards.inline.noti_on_button],
                                                          [keyboards.inline.settings_exit_button]]))


@dp.callback_query(StateFilter(FSMnotifications.turned_off), F.data == 'noti_button_is_on', ~StateFilter(FSMuser_state.not_registered))
async def resume_notification(callback: CallbackQuery, state: FSMContext):
    scheduler.resume()
    await callback.answer('–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω—ã! ')
    await state.set_state(FSMnotifications.turned_on)
    await asyncio.sleep(0.3)
    await callback.message.edit_text(text="‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è",
                                     reply_markup=InlineKeyboardMarkup(
                                                    inline_keyboard=[[keyboards.inline.noti_off_button],
                                                                     [keyboards.inline.settings_exit_button]]))


@dp.callback_query(F.data == 'settings_exit', ~StateFilter(FSMuser_state.not_registered))
async def exit_settings(callback: CallbackQuery):
    try:
        await callback.answer()
        await callback.message.delete()
    except TelegramBadRequest:
        await callback.answer(text='–°—Ç–∞—Ä—ã–µ –¥–∏–∞–ª–æ–≥–æ–≤—ã–µ –æ–∫–Ω–∞ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è –∑–∞–∫—Ä—ã—Ç—å...')

@dp.message()
async def wrong_cmd(message: types.Message):
    await message.reply('–Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã :( ')


async def main():
    await dp.start_polling(bot)

try:
    if __name__ == "__main__":
        logging.basicConfig(level=logging.INFO, stream=sys.stdout)
        asyncio.run(main())
except KeyboardInterrupt:
    scheduler.shutdown()

    pass


#TODO: state –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—Ä–∏ –∑–∞—Ö–æ–¥–µ –≤ —Ä–µ–∂–∏–º GPT, –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–µ–π—Ç—ã –≤ —Å—Ç–µ–∫–µ.